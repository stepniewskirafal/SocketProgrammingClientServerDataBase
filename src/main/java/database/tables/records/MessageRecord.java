/*
 * This file is generated by jOOQ.
 */
package database.tables.records;


import database.tables.Message;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MessageRecord extends UpdatableRecordImpl<MessageRecord> implements Record5<Integer, String, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>socketprogrammingclientserver.message.id</code>.
     */
    public MessageRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>socketprogrammingclientserver.message.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>socketprogrammingclientserver.message.topic</code>.
     */
    public MessageRecord setTopic(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>socketprogrammingclientserver.message.topic</code>.
     */
    public String getTopic() {
        return (String) get(1);
    }

    /**
     * Setter for <code>socketprogrammingclientserver.message.content</code>.
     */
    public MessageRecord setContent(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>socketprogrammingclientserver.message.content</code>.
     */
    public String getContent() {
        return (String) get(2);
    }

    /**
     * Setter for <code>socketprogrammingclientserver.message.recipient</code>.
     */
    public MessageRecord setRecipient(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>socketprogrammingclientserver.message.recipient</code>.
     */
    public String getRecipient() {
        return (String) get(3);
    }

    /**
     * Setter for <code>socketprogrammingclientserver.message.sender</code>.
     */
    public MessageRecord setSender(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>socketprogrammingclientserver.message.sender</code>.
     */
    public String getSender() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Integer, String, String, String, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Message.MESSAGE.ID;
    }

    @Override
    public Field<String> field2() {
        return Message.MESSAGE.TOPIC;
    }

    @Override
    public Field<String> field3() {
        return Message.MESSAGE.CONTENT;
    }

    @Override
    public Field<String> field4() {
        return Message.MESSAGE.RECIPIENT;
    }

    @Override
    public Field<String> field5() {
        return Message.MESSAGE.SENDER;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getTopic();
    }

    @Override
    public String component3() {
        return getContent();
    }

    @Override
    public String component4() {
        return getRecipient();
    }

    @Override
    public String component5() {
        return getSender();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getTopic();
    }

    @Override
    public String value3() {
        return getContent();
    }

    @Override
    public String value4() {
        return getRecipient();
    }

    @Override
    public String value5() {
        return getSender();
    }

    @Override
    public MessageRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public MessageRecord value2(String value) {
        setTopic(value);
        return this;
    }

    @Override
    public MessageRecord value3(String value) {
        setContent(value);
        return this;
    }

    @Override
    public MessageRecord value4(String value) {
        setRecipient(value);
        return this;
    }

    @Override
    public MessageRecord value5(String value) {
        setSender(value);
        return this;
    }

    @Override
    public MessageRecord values(Integer value1, String value2, String value3, String value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MessageRecord
     */
    public MessageRecord() {
        super(Message.MESSAGE);
    }

    /**
     * Create a detached, initialised MessageRecord
     */
    public MessageRecord(Integer id, String topic, String content, String recipient, String sender) {
        super(Message.MESSAGE);

        setId(id);
        setTopic(topic);
        setContent(content);
        setRecipient(recipient);
        setSender(sender);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised MessageRecord
     */
    public MessageRecord(database.tables.pojos.Message value) {
        super(Message.MESSAGE);

        if (value != null) {
            setId(value.getId());
            setTopic(value.getTopic());
            setContent(value.getContent());
            setRecipient(value.getRecipient());
            setSender(value.getSender());
            resetChangedOnNotNull();
        }
    }
}
